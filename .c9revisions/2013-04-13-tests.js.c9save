{"ts":1365870804345,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var assert = require(\"assert\"),\n    hundredDoors = require(\"./2013-04-13-code\");\n\n// test: do we have a Hallway?\nassert(hundredDoors.hallway);\n\n// test: do we have Doors in our Hallway?\nassert(hundredDoors.hallway.doors);\n\n// test: do we have 100 Doors?\nassert.equal(hundredDoors.hallway.doors.length, 10);\n\n// test: are all the Doors \"closed\"?\n\n/* // VERY longhand...\nvar index = 0;\nwhile ( index < hundredDoors.hallway.doors.length ){\n    var door = hundredDoors.hallway.doors[index];\n    \n    assert.equal(door, 0);\n    \n    index++;\n}\n*/\n\n/* // Slightly shorter...\nfor ( var index = 0; index < hundredDoors.hallway.doors.length; index++ ){\n    var door = hundredDoors.hallway.doors[index];\n    \n    assert.equal(door, 0);\n}\n*/\n\n// Much shorter, and preferred...\nhundredDoors.hallway.doors.forEach(function(door){\n    assert.equal(door, 0);\n});\n\n\n/* // What that voodoo do...\nvar list = [ ];\n\nlist.forEach = function(callback){\n    for ( var index = 0; index < this.length; index++ ){\n        callback(this[index], index, this);\n    }\n}\n*/\n\n\n\n// do: PASS 1 -- take a walk down the hallway, change the state of the doors\nassert(hundredDoors.hallway.toggle);\n\n\n// test: are all the Doors \"open\"?\n\n// do: PASS 2 -- take a walk down the hallway, change the state of the doors\n\n// test: is every EVEN Door \"closed\"? is every ODD Door \"open\"?\n\n// do: PASS 3 -- take a walk down the hallway, change the state of the doors\n\n// test: does the Hallway match our expected state?\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":1473}]],"length":1473}
{"contributors":[],"silentsave":false,"ts":1365872167894,"patch":[[{"diffs":[[0,"13-code\");\n\n"],[1,"/**\n * What did we do well?\n *  - Looked up in reference; talked out decisions (mostly)\n *  - Followed the spec for tests and production\n *  - Baby steps (mostly), representative data set\n * \n * What should we improve?\n *  - Study and practice!\n * \n * Did we meet our goals? Why or why not?\n *  - Learned first-hand how to use dictionaries and lists\n *  - Learned about \"module.exports\", \"Array.forEach\"\n */\n\n"],[0,"// test: do "]],"start1":70,"start2":70,"length1":24,"length2":433}]],"length":1882,"saved":false}
{"contributors":[],"silentsave":false,"ts":1366467222182,"patch":[[{"diffs":[[0,"h, 10);\n"],[1,"assert(hundredDoors.hallway.doors.length == 10, \"There are 10 doors\");"],[0,"\n// test"]],"start1":708,"start2":708,"length1":16,"length2":86}]],"length":1952,"saved":false}
{"ts":1366467563505,"patch":[[{"diffs":[[0,"h, 10);\n"],[1,"//"],[0,"assert(h"]],"start1":708,"start2":708,"length1":16,"length2":18}]],"length":1954,"saved":false}
{"contributors":[],"silentsave":false,"ts":1366468033718,"patch":[[{"diffs":[[0,"-13-code"],[1,".js"],[0,"\");\n\n/**"]],"start1":69,"start2":69,"length1":16,"length2":19}]],"length":1957,"saved":false}
{"ts":1366468120592,"patch":[[{"diffs":[[0,"code"],[-1,".js"],[0,"\");\n"]],"start1":73,"start2":73,"length1":11,"length2":8}]],"length":1954,"saved":false}
{"contributors":[],"silentsave":false,"ts":1366468279900,"patch":[[{"diffs":[[0,"h, 10);\n"],[-1,"//"],[0,"assert(h"]],"start1":708,"start2":708,"length1":18,"length2":16},{"diffs":[[0,"ngth == "],[-1,"10"],[1,"9"],[0,", \"There"]],"start1":752,"start2":752,"length1":18,"length2":17}]],"length":1951,"saved":false}
{"ts":1366468299539,"patch":[[{"diffs":[[0,"h, 10);\n"],[1,"//"],[0,"assert(h"]],"start1":708,"start2":708,"length1":16,"length2":18},{"diffs":[[0,"oors\");\n"],[1,"\n"],[0,"// test:"]],"start1":780,"start2":780,"length1":16,"length2":17}]],"length":1954,"saved":false}
