{"ts":1365859784723,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1365861488300,"patch":[[{"diffs":[[1,"/**\n * Retrospective:\n * \n * What did we do well?\n *   > Followed our test plan...!\n *   > Commit per pair\n *   - Started to refactor at the end...\n *   - Baby steps at first...\n *   - Enforced test runs!\n * \n * What would we like to improve?\n *   > More consistent coding style:\n *     - assert() vs assert.equal()\n *     - whitespace around arguments\n *     - comparisons: == vs ===\n *     - messages: '1 + 1 equals 2' vs '1 and 1 is 2'\n *   - More baby steps...?\n *   > Refactor earlier to reduce typing:\n *     - before moving to another operator?\n *     - after doing something repetitively\n *     - reduce repetition and possible errors\n *   - Start with division!\n * \n * Did we meet our goals? Why?\n *   - Slowed down and learned a lot:\n *     - \"git commit -a\" to commit all dirty files\n *     - \"git checkout\" to get back to a saved state\n *     - refactoring!\n *   - Everyone got a turn at pilot/copilot...!\n *   - Did not fulfill specification:\n *     - No full tests on subtraction()\n *     - No tests or code on multiplication() or division()\n *     - No tests to cover \"DIV BY ZERO\"\n */\n\nvar assert = require(\"assert\");\n\n/**\n * four functions with two parameters:\n * - addition\n * - subtraction\n * - multiplication\n * - division\n * \n * Must accept positive and negative Numbers (int or \n * float) AND zero. Must not make an error!\n */\n \n/**\n * testing addition():\n * one | two | out\n * ====+=====+====\n *  +1 | +1  | +2\n *  +1 | +0  | +1\n *  +1 | -1  | +0\n *  -1 | +1  | +0\n *  -1 | +0  | -1\n *  -1 | -1  | -2\n *  +0 | +1  | +1\n *  +0 | +0  | +0\n *  +0 | -1  | -1\n */\n \n //Adding addition function\nfunction addition (a, b) {\n    return (a + b);\n}\n \n// These are the tests for function addition\ntestAddition(+1, +1, +2, '+1 + +1 equals 2');\n\nassert( addition(+1, +0) === +1, '+1 + +0 equals 1');\nassert( addition(+1, -1) === +0, '+1 + -1 equals 0');\nassert( addition(-1, +1) === +0, '-1 + +1 equals 0');\nassert( addition(-1, +0) === -1, '-1 + +0 equal -1');\nassert( addition(-1, -1) === -2, '-1 + -1 = -2');\nassert( addition(+0, +1) === +1, '+0 + +1 is 1');\nassert( addition(+0, +0) === +0, '+0 + +0 equals 0');\nassert( addition(+0, -1) === -1, '+0 + -1 equals -1');\n \n/**\n * testing subtraction():\n * one | two | out\n * ====+=====+====\n *  +1 | +1  | +0\n *  +1 | +0  | +1\n *  +1 | -1  | +2\n *  -1 | +1  | -2\n *  -1 | +0  | -1\n *  -1 | -1  | 0\n *  +0 | +1  | -1\n *  +0 | +0  | +0\n *  +0 | -1  | +1\n*/\n\n// This is the subration function\n\nvar subtraction = function (a,b) {\n    \n    return (a - b);\n}\n\n// this is the first failing test for subtration\nassert.equal(0, subtraction(1, 1), '1 - 1 = 0');\n\nfunction testAddition(a, b, c, message){\n    assert(addition(a, b) === c, message);\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":2699}]],"length":2699,"saved":false}
